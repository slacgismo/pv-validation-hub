name: Deploy Production to Amazon ECS

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  AWS_REGION: us-west-2                    
  ECR_API_REPOSITORY: pv-validation-hub-api 
  ECR_WORKER_REPOSITORY: pv-validation-hub-worker           
  ECS_WORKER_SERVICE: valhub-worker-service
  ECS_WORKER_CLUSTER: pv-validation-hub-worker-cluster      
  ECS_API_SERVICE: ecs-api-service
  ECS_API_CLUSTER: pv-validation-hub-api-cluster               
  API_CONTAINER_NAME: pv-validation-hub-api-task
  WORKER_CONTAINER_NAME: pv-validation-hub-worker-task

jobs:
  build_fe:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '16.11.1'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies and build
        run: |
          cd frontend
          npm install
          npm run build

      - name: Move Build to tmp
        run: |
          mkdir -p /tmp/workspace/build
          mv -v frontend/build/* /tmp/workspace/build

      - name: Temporarily save Build to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-client
          path: /tmp/workspace

  deploy_fe:
    needs: build_fe
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve saved Build
        uses: actions/download-artifact@v2
        with:
          name: build-client
          path: /tmp/workspace

      - name: Deploy to S3
        run: aws s3 sync /tmp/workspace/build/ s3://${{ secrets.FE_S3_URL }}

      - name: Run CF invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.FE_CF_ID }} --paths '/*'

  deploy_worker:
    name: Deploy Worker
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: openfido/prod-worker
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: 'openfido-prod-worker-task'
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: 'openfido-prod-worker-service'
          cluster: 'openfido-prod-ecs-cluster'
          wait-for-service-stability: true

  deploy_api:
    name: Deploy API
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: openfido/prod-api
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: 'openfido-prod-api-task'
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: 'openfido-prod-api-service'
          cluster: 'openfido-prod-ecs-cluster'
          wait-for-service-stability: true
