"""
Django settings for valhub project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import boto3
import base64
from botocore.exceptions import ClientError
import json
from botocore.config import Config
import mimetypes
from base.logger import setup_logging
from base.logger import logging


# Add css mimetype
mimetypes.add_type("text/css", ".css", True)
mimetypes.add_type("text/html", ".css", True)

config = Config(
    connect_timeout=2,
    read_timeout=2,
    retries={"max_attempts": 10, "mode": "standard"},
)

setup_logging()

logger = logging.getLogger(__name__)

ENVIRONMENT: str = os.environ.get("ENVIRONMENT", "")
DEBUG: bool = True

if ENVIRONMENT == "production":
    logger.info("Production environment")
    DEBUG = False


logger.info(f"Environment: {ENVIRONMENT}")
logger.info(f"Debug: {DEBUG}")

if DEBUG:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)


def get_secret_from_aws_secrets_manager(secret_name: str):
    region_name = "us-west-2"
    logger.debug("Start of get secret")

    # Create a Secrets Manager client
    session = boto3.session.Session()

    # Check for AWS credentials
    credentials = session.get_credentials()
    if (
        not credentials
        or not credentials.access_key
        or not credentials.secret_key
    ):
        logger.error("No AWS credentials found.")
        raise ValueError("Credentials not found")

    client = session.client(
        service_name="secretsmanager", region_name=region_name, config=config
    )
    logger.info("Session started")

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        logger.info("Retrieving secrets")
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
        logger.info("Retrieved secrets")
    except ClientError as e:
        error_code = e.response.get("Error", {}).get("Code", "Unknown")
        if error_code == "DecryptionFailureException":
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            logger.error("Error retrieving secrets 1:", e)

        elif error_code == "InternalServiceErrorException":
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            logger.error("Error retrieving secrets 2:", e)

        elif error_code == "InvalidParameterException":
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            logger.error("Error retrieving secrets 3:", e)

        elif error_code == "InvalidRequestException":
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            logger.error("Error retrieving secrets 4:", e)

        elif error_code == "ResourceNotFoundException":
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            logger.error("Error retrieving secrets 5:", e)

        else:
            logger.error("Error retrieving secrets 6:", e)
    except Exception as e:
        logger.error("Error retrieving secrets 7:", e)
    else:
        # Decrypts secret using the associated KMS key.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if "SecretString" in get_secret_value_response:
            secret_string = get_secret_value_response["SecretString"]
            secret: dict[str, str] = json.loads(secret_string)
            return secret
        elif "SecretBinary" in get_secret_value_response:
            decoded_binary_secret = base64.b64decode(
                get_secret_value_response["SecretBinary"]
            )
            return decoded_binary_secret
        else:
            raise ValueError("Secret not found")


def get_django_secret_key():
    if ENVIRONMENT == "development":
        SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
    elif ENVIRONMENT == "production":
        try:
            secret = get_secret_from_aws_secrets_manager("DjangoSecretKey")
            if secret is None:
                raise Exception("Secret is None")

            if not isinstance(secret, dict):
                raise Exception("Secret is not a dictionary")

            if "DJANGO_SECRET_KEY" not in secret:
                raise Exception("DJANGO_SECRET_KEY not in secret")
            SECRET_KEY = secret["DJANGO_SECRET_KEY"]

        except Exception as e:
            raise Exception("Error retrieving Django secret key")
    else:
        raise Exception("Environment not set")
    return SECRET_KEY


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_django_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

CSRF_TRUSTED_ORIGINS = [
    "https://pv-validation-hub.org",
    "https://api.pv-validation-hub.org",
    "https://db.pv-validation-hub.org",
]

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Application definition

INSTALLED_APPS = [
    "accounts.apps.AccountsConfig",
    "analyses.apps.AnalysesConfig",
    "submissions.apps.SubmissionsConfig",
    "system_metadata.apps.SystemmetadataConfig",
    "file_metadata.apps.FilemetadataConfig",
    "validation_tests.apps.ValidationTestsConfig",
    "backend.apps.BackendConfig",
    "error_report.apps.ErrorReportConfig",
    "versions.apps.VersionsConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}

FIXTURE_DIRS = (os.path.join(BASE_DIR, "valhub/fixtures"),)

CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = [
#     "https://domain.com",
#     "http://127.0.0.1:8080",
# ]

ROOT_URLCONF = "valhub.urls"

AUTH_USER_MODEL = "accounts.Account"

LOGIN_URL = "/login"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "valhub.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


def configure_db():
    if ENVIRONMENT == "development":
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql_psycopg2",
                "NAME": "valhub",
                "USER": "valhub",
                "PASSWORD": "valhub",
                "HOST": "db",
                "PORT": "5432",
            }
        }
    elif ENVIRONMENT == "production":
        db_secrets = get_secret_from_aws_secrets_manager("pvinsight-db")

        if db_secrets is None:
            raise Exception("Database secrets are None")

        if not isinstance(db_secrets, dict):
            raise Exception("Database secrets are not a dictionary")

        logger.debug("Retrieved secrets")

        db_name = "postgres"
        db_identifier = db_secrets.get("dbInstanceIdentifier", None)
        username = db_secrets.get("username", None)
        password = db_secrets.get("password", None)
        hostname = db_secrets.get("proxy", None)
        port = db_secrets.get("port", None)

        if None in [db_name, username, password, hostname, port]:
            raise Exception("One or more database secrets are missing")

        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql_psycopg2",
                "NAME": db_name,
                "USER": username,
                "PASSWORD": password,
                "HOST": hostname,
                "PORT": port,
            }
        }
    else:
        raise Exception("Environment not set")

    return DATABASES


DATABASES = configure_db()


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Static Root
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = "/staticfiles/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
